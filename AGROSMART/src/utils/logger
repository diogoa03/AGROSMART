import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional
from src.config.settings import Settings

class Logger:
    """Logger personalizado para o sistema."""
    
    def __init__(self, name: str, log_level: int = logging.INFO):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(log_level)
        
        if not self.logger.handlers:
            self._setup_handlers()
    
    def _setup_handlers(self) -> None:
        log_dir = Settings.LOGS_DIR
        log_dir.mkdir(exist_ok=True)
        
        file_handler = logging.FileHandler(
            log_dir / f"app_{datetime.now().strftime('%Y%m%d')}.log",
            encoding='utf-8'
        )
        file_handler.setFormatter(self._get_formatter(detailed=True))
        self.logger.addHandler(file_handler)
        
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(self._get_formatter(detailed=False))
        self.logger.addHandler(console_handler)
    
    def _get_formatter(self, detailed: bool = False) -> logging.Formatter:
        if detailed:
            return logging.Formatter(
                '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)d] %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )
        return logging.Formatter('%(levelname)s: %(message)s')
    
    def info(self, message: str) -> None:
        self.logger.info(message)
    
    def error(self, message: str) -> None:
        self.logger.error(message)
    
    def warning(self, message: str) -> None:
        self.logger.warning(message)
    
    def debug(self, message: str) -> None:
        self.logger.debug(message)